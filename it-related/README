=========================
Scripts for major IT work
=========================

These scripts are useful for major IT work, such as dealing with racks
of machines. While originally developed for handling just mac minis,
they should also work for any collection of machines.

Common Input
============

All the scripts take as input a text file with the FQDN of the hosts to
operate upon. (In column 1 if this is a CSV format file.) The first line
is skipped, on the assumption it is the column header text.

Move Support
============

When moving hosts between data centers, there are 2 scripts to generate
and perform some operations where host names change:

    ``move_hosts``:
        Convert spreadsheets exported as CSV into data lists consumed by
        other tasks, including:

            - SQL for update slavealloc database
            - SQL for update graphserver database
            - List as consumed by other scripts listed below

    ``rename_host_bugs``:
        Change the alias & summary fields on the per host tracker bugs.

.. note:: Some data hardcoded for SCL1 to SCL3 move.

Slavealloc Operations
=====================

There are three scripts that help with managing the slavealloc enabled
status of a group of hosts:

    - ``get_enabled_hosts`` record which hosts were enabled prior to the
      work

    - ``disable_all_hosts`` disable all enabled hosts

    - ``re-enable_hosts`` re-enable only the hosts that were originally
      enabled

All of these are passed the common input file. They write status files
into the same directory as the input file. All support the ``--help``
option for more information.

The slavealloc database parameters are provided via a config file,
called ``mysql.ini`` in the same directory as the scripts. That file can
be modified as needed.

All of these files should be placed in a directory on a host with access
to the database. (Typically, as user ``slavealloc`` on host
``slavealloc``.)

Host Management Operations
==========================

There is one fabric script to manage the boxes in terms of shutdown and
reboot -- ``manage_hosts``. It has several subcommands:

    - ``ping`` -- ping the boxes to see if they are reachable. (just
      does one attempt.

    - ``verify_up`` -- used to ensure boxes are back online. Also
      can be used to verify proper credentials in advance of "real"
      usage. (windows boxes are skipped)

    - ``reboot`` -- reboot all boxes. Typically done after the slaves
      are re-enabled in slavealloc (windows boxes are skipped)

    - ``shutdown`` -- shutdown all boxes. (windows boxes are skipped)

    - ``gen_nagios_downtimes`` -- Produces output that 'oncall' can use
      to update nagios without spamming an IRC channel. Script is
      located on nagios1.private.releng.scl3.mozilla.com. If you do want
      to use the irc nagios-bot to downtime hosts, append
      "``:format=irc``" . This prints the irc commands to stdout. You
      need to copy/paste to the right channel.

All of these are passed the common input file. All commands use ``root``
credentials for login. (The ``cltbld`` account doesn't have rights to
shutdown the box.) The script generates a "fabfile" python file with the
hosts hardcoded if it does not exist. If your host file is named
``hosts-I-want-to-manage``, the fabfile will be named the same with
``-fab.py`` appended. The script always invokes ``fab`` with the proper
fabfile. See Tips_ below for more.

This script is best run from a box the user can ssh into directly with
ssh agent forwarding. For modern boxes, this will allow passwordless
execution of the commands. Otherwise, the user is prompted to enter
passwords as normal with fabric scripts. (Note that for some older
boxes, there may be several different passwords needed. Yech.)

Note: Hosts suporting the servo project can not be accessed from hosts
        on our build network. You should be able to access them from
        your laptop.

Tips
----

1. Working with offline hosts.

    Host management is hard. Not all boxes will be online. Not all will
    respond to the same password. Other things may prevent the script
    from running cleanly for all hosts.

    The recommended way to deal with such hosts is to comment them out
    in the generated fabfile, rather than modifying the hosts file. This
    has proven to be more useful IRL, when after all issues are
    addressed you might need to revert to the original full list.

2. Preparing for usage.

    Before the downtime, it is a good idea to use the "``verify_up``"
    subcommand. This will let you modify the host list, and/or find
    needed passwords, in advance of the critical window.

3. It's Fabric! Use it!

    If you're fortunate enough to have all your hosts respond to ssh
    keys, you can use built in fabric features to run commands in
    parallel. Just add the "``-P``" option.

    To run an ad-hoc command, just the special "``--``" command,
    followed by the remote command to execute. For example::

        ./manage_hosts host_list -- date

..
    vim: ft=rst sw=4 sts=4 ai:
