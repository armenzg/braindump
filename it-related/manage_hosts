#!/bin/bash
# vim: sts=4 sw=4 ai:

set -eu

USAGE="usage: ${0##*/} host_file_name
Generate a custom fabfile.py to perform tasks.
arguements:
    host_file_name  name of file of hostnames, with title

options:
    -h|--help	    this message
"

# boilerplate
progdir=$(cd $(dirname $0);/bin/pwd)
warn() { for m; do echo "$m"; done 2>&1 ; }
die() { warn "$@"; exit 1; }
usage() { warn "$@" "${USAGE:-}"; test $# -eq 0; exit $?; }
cleanup() { test -z "${KEEP:-}" -a -d ${tmpdir:=<NO_SUCH_DIR>} && rm -rf $tmpdir ; }
trap cleanup EXIT

# configuration

while test $# -gt 0; do
    case "$1" in
    -h|--help) usage ;;
    -*) usage "unsupported option '$1'" ;;
    *) break ;;
    esac
    shift
done

test $# -ge 1 || usage "wrong number of options '$#'"
hosts="$1"
shift
test -r "$hosts" || usage "can't read '$hosts'"
# make sure we can access fab (part of fabric)
hash fab || usage "Required program 'fab' not on path"
# python doesn't like module names with dots, convert any extension
fabfile=${hosts//./-}-fab.py

tmpdir=$(mktemp -d /tmp/${0##*/}.$USER.XXXXXX)

if test $hosts -nt $fabfile -o ! -r $fabfile; then
    # strip column title, leave as fqdn, but support CSV as input
    tail -n +2 "$hosts" | cut -d, -f1 > $tmpdir/hosts_to_check

    # create fab file
    {
        cat <<EOF
from fabric.api import env, warn_only, run, local, quiet
from fabric import state

state.output['running'] = False
env.eagerly_disconnect = True
env.skip_bad_hosts = True
env.connection_attempts = 3
env.user = "root"
env.hosts = [
EOF
        # make file pep-8 compliant ;)
        while read slave_name; do
            # handle commented out host names
            host="${slave_name#\#}"
            if test "${slave_name}" != "${host}" ; then
                leader='#'
            else
                leader=''
            fi
            echo "    ${leader}\"$host\","
        done < $tmpdir/hosts_to_check
        echo "]"
        cat <<EOF


def ping():
    with quiet():
        if local('ping -c 1 %(host)s' % env).failed:
            print "%(host)s not pingable" % env


def verify_up():
    if env['host'].startswith('w'):
        print "%(host)s skipped" % env
        return
    with quiet():
        if run('exit').failed:
            print "%(host)s FAIL" % env


def reboot():
    if env['host'].startswith('w'):
        print "%(host)s skipped" % env
        return
    with warn_only():
        run('/sbin/reboot')


def shut_down():
    if env['host'].startswith('w'):
        print "%(host)s skipped" % env
        return
    with warn_only():
        run('shutdown -h now major work')

def gen_nagios_downtimes(duration='2d', reason='DC move'):
    context = locals()
    context.update(env)
    print("nagios-releng: downtime %(host)s %(duration)s %(reason)s" %
        context)
EOF
    } > $tmpdir/fabfile.py
    mv $tmpdir/fabfile.py $fabfile
fi
# if no other args specified, list the file
test $# -eq 0 && set -- -l

# run with fab file
fab --fabfile=$fabfile "$@"

# done
exit $?
